<?php
/**
 * @file
 *
 * Ermahgerdifies node titles and bodies.
 */

/**
 * Implements hook_node_view_alter().
 */
function drermahgerd_node_view_alter(&$build) {
  $path = libraries_get_path('ermahgerd') . '/src/Ermahgerd/Ermahgerd.php';
  require_once $path;
  $e = new Ermahgerd\Ermahgerd();
  $markup = $build['body'][0]['#markup'];
  $d = _drermahgerd_translate_markup($e, $markup);
  $build['body'][0]['#markup'] = $d;
  $d = _drermahgerd_translate_plain($e, $build['#node']->title);
  drupal_set_title($d);
  if ('full' == $build['#view_mode']) {
    drupal_set_title($d);
  }
  else { // assuming teaser mode here
    $build['#node']->title = $d;
  }
}

/**
 * Ermahgerdifies given markup.
 *
 * @param \Ermahgerd\Ermahgerd $e The ermahgerd translator object.
 * @param string $markup The markup string.
 * @param boolean $no_cache Pass TRUE to bypass module cache.
 * @return string Returns the ermahgerdified markup.
 */
function _drermahgerd_translate_markup(Ermahgerd\Ermahgerd $e, $markup, $no_cache = false) {

  if ('' == trim($markup)) {
    return $markup;
  }

  if (! $no_cache) {
    // cache lookup
    $cache_key = _drermahgerd_generate_cache_key($markup, 'markup');
    $cache = cache_get($cache_key);
    if ($cache) {
      return $cache->data;
    }
  }

  // wrap the given markup in a div
  $markup = "<div>" . $markup . "</div>";
  $doc = new DOMDocument();

  // hacky way of loading HTML as UTF-8
  // @see http://www.php.net/manual/en/domdocument.loadhtml.php#95251
  @$doc->loadHTML('<?xml encoding="UTF-8">' . $markup);
  $doc->removeChild($doc->firstChild);
  $doc->encoding = 'UTF-8';

  $xpath = new DOMXPath($doc);
  // process all text nodes
  foreach ($xpath->query('//text()') as $textNode) {
    $textNode->nodeValue = $e->translate($textNode->nodeValue);
  }

  // @see http://stackoverflow.com/a/6953808/307333
  # remove <!DOCTYPE
  $doc->removeChild($doc->firstChild);
  # remove <html><body></body></html>
  $doc->replaceChild($doc->firstChild->firstChild->firstChild, $doc->firstChild);
  $d = $doc->saveHTML();

  $d = trim(substr(substr($d, 5), 0, -7)); // snip off the wrapper-div and trim off any excess whitespace.

  // save to cache
  if (! $no_cache) {
    cache_set($cache_key, $d);
  }

  return $d;
}

/**
 * Ermahgerdifies given plain text.
 *
 * @param \Ermahgerd\Ermahgerd $e The ermahgerd translator object.
 * @param string $text The plain text.
 * @param boolean $no_cache Pass TRUE to bypass module cache.
 * @return string The ermahgerdified text.
 */
function _drermahgerd_translate_plain(Ermahgerd\Ermahgerd $e, $text, $no_cache = false) {

  if ('' == trim($text)) {
    return $text;
  }
  if (! $no_cache) {
    $cache_key = _drermahgerd_generate_cache_key($text, 'plain');
    $cache = cache_get($cache_key);
    if ($cache) {
      return $cache->data;
    }
  }

  $d = $e->translate($text);

  if (! $no_cache) {
    cache_set($cache_key, $d);
  }
  return $d;
}

/**
 * Generates a unique cache key based on the given content and prefix.
 *
 * @param string $content The content.
 * @param string $prefix A cache key prefix, indicating the translation context (plaintext, markup) of the given content.
 * @return string
 */
function _drermahgerd_generate_cache_key($content, $prefix = '') {
  // key := "drermahgerd_content_" + prefix + content hash
  return 'drermahgerd_content_' . ltrim($prefix . '_' . md5($content), '_');
}
