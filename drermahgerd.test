<?php
/**
 * @file
 * Unit tests for the Drermahgerd module.
 */

/**
 * Test case for the translation functionality in the Drermahgerd module.
 *
 * @see DrupalUnitTestCase
 * @ingroup drermahgerd
 */
class DrermahgerdTranslateTestCase extends DrupalUnitTestCase
{
  /**
   * @var Ermahgerd\Ermahgerd
   */
  protected $_e;

  /**
   * Gives display information to the SimpleTest system.
   *
   * @return array A keyed array of information for SimpleTest to show.
   */
  static public function getInfo()
  {
    return array(
      'name' => 'Drermahgerd Translation Test',
      'description' => "Unit tests the Drermahgerd module's translation functionality.",
      'group' => 'Drermahgerd',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see DrupalUnitTestCase::setUp()
   */
  public function setUp()
  {
    drupal_load('module', 'drermahgerd');
    $path = libraries_get_path('ermahgerd') . '/src/Ermahgerd/Ermahgerd.php';
    require_once $path;
    $this->_e = new Ermahgerd\Ermahgerd();
    parent::setUp();
  }

  /**
   * Calls <code>_drermahgerd_translate_markup()</code> and checks that it returns
   * the correct result.
   */
  public function testTranslateMarkup()
  {
    $text = '';
    $actual = _drermahgerd_translate_markup($this->_e, $text);
    $expected = '';
    $message = 'An empty string should return an empty string';
    $this->assertEqual($expected, $actual, $message);

    $text = '<p>this is a<em> test</em></p>';
    $actual = _drermahgerd_translate_markup($this->_e, $text, true);
    $expected = '<p>THERS ERS A<em> TERST</em></p>';
    $message = "The text in a given markup string should be properly translated, whilst maintaining the document's structure.";
    $this->assertEqual($expected, $actual, $message);
  }

  /**
   * Calls <code>_drermahgerd_translate_plain()</code> and checks that it returns
   * the correct result.
   */
  public function testTranslatePlaintext()
  {
    $text = '';
    $actual = _drermahgerd_translate_plain($this->_e, $text, true);
    $expected = '';
    $message = 'An empty string should return an empty string';
    $this->assertEqual($expected, $actual, $message);

    $text = 'this is a test';
    $actual = _drermahgerd_translate_plain($this->_e, $text);
    $expected = 'THERS ERS A TERST';
    $message = 'An given plaintext string should be properly translated.';

    $this->assertEqual($expected, $actual, $message);
  }
}
